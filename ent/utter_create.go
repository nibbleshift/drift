// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nibbleshift/drift/ent/user"
	"github.com/nibbleshift/drift/ent/utter"
)

// UtterCreate is the builder for creating a Utter entity.
type UtterCreate struct {
	config
	mutation *UtterMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (uc *UtterCreate) SetCreatedAt(t time.Time) *UtterCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *UtterCreate) SetNillableCreatedAt(t *time.Time) *UtterCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetData sets the "data" field.
func (uc *UtterCreate) SetData(s string) *UtterCreate {
	uc.mutation.SetData(s)
	return uc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (uc *UtterCreate) SetOwnerID(id int) *UtterCreate {
	uc.mutation.SetOwnerID(id)
	return uc
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (uc *UtterCreate) SetNillableOwnerID(id *int) *UtterCreate {
	if id != nil {
		uc = uc.SetOwnerID(*id)
	}
	return uc
}

// SetOwner sets the "owner" edge to the User entity.
func (uc *UtterCreate) SetOwner(u *User) *UtterCreate {
	return uc.SetOwnerID(u.ID)
}

// Mutation returns the UtterMutation object of the builder.
func (uc *UtterCreate) Mutation() *UtterMutation {
	return uc.mutation
}

// Save creates the Utter in the database.
func (uc *UtterCreate) Save(ctx context.Context) (*Utter, error) {
	uc.defaults()
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UtterCreate) SaveX(ctx context.Context) *Utter {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UtterCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UtterCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UtterCreate) defaults() {
	if _, ok := uc.mutation.CreatedAt(); !ok {
		v := utter.DefaultCreatedAt()
		uc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UtterCreate) check() error {
	if _, ok := uc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Utter.created_at"`)}
	}
	if _, ok := uc.mutation.Data(); !ok {
		return &ValidationError{Name: "data", err: errors.New(`ent: missing required field "Utter.data"`)}
	}
	return nil
}

func (uc *UtterCreate) sqlSave(ctx context.Context) (*Utter, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UtterCreate) createSpec() (*Utter, *sqlgraph.CreateSpec) {
	var (
		_node = &Utter{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(utter.Table, sqlgraph.NewFieldSpec(utter.FieldID, field.TypeInt))
	)
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.SetField(utter.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.Data(); ok {
		_spec.SetField(utter.FieldData, field.TypeString, value)
		_node.Data = value
	}
	if nodes := uc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   utter.OwnerTable,
			Columns: []string{utter.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_utters = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UtterCreateBulk is the builder for creating many Utter entities in bulk.
type UtterCreateBulk struct {
	config
	builders []*UtterCreate
}

// Save creates the Utter entities in the database.
func (ucb *UtterCreateBulk) Save(ctx context.Context) ([]*Utter, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*Utter, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UtterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UtterCreateBulk) SaveX(ctx context.Context) []*Utter {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UtterCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UtterCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
