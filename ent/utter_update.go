// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nibbleshift/drift/ent/predicate"
	"github.com/nibbleshift/drift/ent/user"
	"github.com/nibbleshift/drift/ent/utter"
)

// UtterUpdate is the builder for updating Utter entities.
type UtterUpdate struct {
	config
	hooks    []Hook
	mutation *UtterMutation
}

// Where appends a list predicates to the UtterUpdate builder.
func (uu *UtterUpdate) Where(ps ...predicate.Utter) *UtterUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetCreatedAt sets the "created_at" field.
func (uu *UtterUpdate) SetCreatedAt(t time.Time) *UtterUpdate {
	uu.mutation.SetCreatedAt(t)
	return uu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uu *UtterUpdate) SetNillableCreatedAt(t *time.Time) *UtterUpdate {
	if t != nil {
		uu.SetCreatedAt(*t)
	}
	return uu
}

// SetData sets the "data" field.
func (uu *UtterUpdate) SetData(s string) *UtterUpdate {
	uu.mutation.SetData(s)
	return uu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (uu *UtterUpdate) SetOwnerID(id int) *UtterUpdate {
	uu.mutation.SetOwnerID(id)
	return uu
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (uu *UtterUpdate) SetNillableOwnerID(id *int) *UtterUpdate {
	if id != nil {
		uu = uu.SetOwnerID(*id)
	}
	return uu
}

// SetOwner sets the "owner" edge to the User entity.
func (uu *UtterUpdate) SetOwner(u *User) *UtterUpdate {
	return uu.SetOwnerID(u.ID)
}

// Mutation returns the UtterMutation object of the builder.
func (uu *UtterUpdate) Mutation() *UtterMutation {
	return uu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (uu *UtterUpdate) ClearOwner() *UtterUpdate {
	uu.mutation.ClearOwner()
	return uu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UtterUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UtterUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UtterUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UtterUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UtterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(utter.Table, utter.Columns, sqlgraph.NewFieldSpec(utter.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.CreatedAt(); ok {
		_spec.SetField(utter.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.Data(); ok {
		_spec.SetField(utter.FieldData, field.TypeString, value)
	}
	if uu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   utter.OwnerTable,
			Columns: []string{utter.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   utter.OwnerTable,
			Columns: []string{utter.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{utter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UtterUpdateOne is the builder for updating a single Utter entity.
type UtterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UtterMutation
}

// SetCreatedAt sets the "created_at" field.
func (uuo *UtterUpdateOne) SetCreatedAt(t time.Time) *UtterUpdateOne {
	uuo.mutation.SetCreatedAt(t)
	return uuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uuo *UtterUpdateOne) SetNillableCreatedAt(t *time.Time) *UtterUpdateOne {
	if t != nil {
		uuo.SetCreatedAt(*t)
	}
	return uuo
}

// SetData sets the "data" field.
func (uuo *UtterUpdateOne) SetData(s string) *UtterUpdateOne {
	uuo.mutation.SetData(s)
	return uuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (uuo *UtterUpdateOne) SetOwnerID(id int) *UtterUpdateOne {
	uuo.mutation.SetOwnerID(id)
	return uuo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (uuo *UtterUpdateOne) SetNillableOwnerID(id *int) *UtterUpdateOne {
	if id != nil {
		uuo = uuo.SetOwnerID(*id)
	}
	return uuo
}

// SetOwner sets the "owner" edge to the User entity.
func (uuo *UtterUpdateOne) SetOwner(u *User) *UtterUpdateOne {
	return uuo.SetOwnerID(u.ID)
}

// Mutation returns the UtterMutation object of the builder.
func (uuo *UtterUpdateOne) Mutation() *UtterMutation {
	return uuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (uuo *UtterUpdateOne) ClearOwner() *UtterUpdateOne {
	uuo.mutation.ClearOwner()
	return uuo
}

// Where appends a list predicates to the UtterUpdate builder.
func (uuo *UtterUpdateOne) Where(ps ...predicate.Utter) *UtterUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UtterUpdateOne) Select(field string, fields ...string) *UtterUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated Utter entity.
func (uuo *UtterUpdateOne) Save(ctx context.Context) (*Utter, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UtterUpdateOne) SaveX(ctx context.Context) *Utter {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UtterUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UtterUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UtterUpdateOne) sqlSave(ctx context.Context) (_node *Utter, err error) {
	_spec := sqlgraph.NewUpdateSpec(utter.Table, utter.Columns, sqlgraph.NewFieldSpec(utter.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Utter.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, utter.FieldID)
		for _, f := range fields {
			if !utter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != utter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.CreatedAt(); ok {
		_spec.SetField(utter.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.Data(); ok {
		_spec.SetField(utter.FieldData, field.TypeString, value)
	}
	if uuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   utter.OwnerTable,
			Columns: []string{utter.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   utter.OwnerTable,
			Columns: []string{utter.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Utter{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{utter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
