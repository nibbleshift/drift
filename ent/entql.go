// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/nibbleshift/drift/ent/link"
	"github.com/nibbleshift/drift/ent/post"
	"github.com/nibbleshift/drift/ent/predicate"
	"github.com/nibbleshift/drift/ent/tag"
	"github.com/nibbleshift/drift/ent/user"
	"github.com/nibbleshift/drift/ent/userprofile"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 5)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   link.Table,
			Columns: link.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: link.FieldID,
			},
		},
		Type: "Link",
		Fields: map[string]*sqlgraph.FieldSpec{
			link.FieldCreatedAt: {Type: field.TypeTime, Column: link.FieldCreatedAt},
			link.FieldData:      {Type: field.TypeString, Column: link.FieldData},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   post.Table,
			Columns: post.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: post.FieldID,
			},
		},
		Type: "Post",
		Fields: map[string]*sqlgraph.FieldSpec{
			post.FieldCreatedAt: {Type: field.TypeTime, Column: post.FieldCreatedAt},
			post.FieldData:      {Type: field.TypeString, Column: post.FieldData},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   tag.Table,
			Columns: tag.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tag.FieldID,
			},
		},
		Type: "Tag",
		Fields: map[string]*sqlgraph.FieldSpec{
			tag.FieldData: {Type: field.TypeString, Column: tag.FieldData},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldUsername:  {Type: field.TypeString, Column: user.FieldUsername},
			user.FieldFirstName: {Type: field.TypeString, Column: user.FieldFirstName},
			user.FieldLastName:  {Type: field.TypeString, Column: user.FieldLastName},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   userprofile.Table,
			Columns: userprofile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userprofile.FieldID,
			},
		},
		Type: "UserProfile",
		Fields: map[string]*sqlgraph.FieldSpec{
			userprofile.FieldAvatar:   {Type: field.TypeString, Column: userprofile.FieldAvatar},
			userprofile.FieldAbout:    {Type: field.TypeString, Column: userprofile.FieldAbout},
			userprofile.FieldLocation: {Type: field.TypeString, Column: userprofile.FieldLocation},
			userprofile.FieldDob:      {Type: field.TypeTime, Column: userprofile.FieldDob},
		},
	}
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.OwnerTable,
			Columns: []string{post.OwnerColumn},
			Bidi:    false,
		},
		"Post",
		"User",
	)
	graph.MustAddE(
		"tags",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   post.TagsTable,
			Columns: post.TagsPrimaryKey,
			Bidi:    false,
		},
		"Post",
		"Tag",
	)
	graph.MustAddE(
		"mentions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   post.MentionsTable,
			Columns: post.MentionsPrimaryKey,
			Bidi:    false,
		},
		"Post",
		"User",
	)
	graph.MustAddE(
		"post",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.PostTable,
			Columns: tag.PostPrimaryKey,
			Bidi:    false,
		},
		"Tag",
		"Post",
	)
	graph.MustAddE(
		"posts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
		},
		"User",
		"Post",
	)
	graph.MustAddE(
		"friends",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FriendsTable,
			Columns: user.FriendsPrimaryKey,
			Bidi:    true,
		},
		"User",
		"User",
	)
	graph.MustAddE(
		"followers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FollowersTable,
			Columns: user.FollowersPrimaryKey,
			Bidi:    true,
		},
		"User",
		"User",
	)
	graph.MustAddE(
		"profile",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.ProfileTable,
			Columns: []string{user.ProfileColumn},
			Bidi:    false,
		},
		"User",
		"UserProfile",
	)
	graph.MustAddE(
		"mentions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.MentionsTable,
			Columns: user.MentionsPrimaryKey,
			Bidi:    false,
		},
		"User",
		"Post",
	)
	graph.MustAddE(
		"links",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userprofile.LinksTable,
			Columns: []string{userprofile.LinksColumn},
			Bidi:    false,
		},
		"UserProfile",
		"Link",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (lq *LinkQuery) addPredicate(pred func(s *sql.Selector)) {
	lq.predicates = append(lq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the LinkQuery builder.
func (lq *LinkQuery) Filter() *LinkFilter {
	return &LinkFilter{config: lq.config, predicateAdder: lq}
}

// addPredicate implements the predicateAdder interface.
func (m *LinkMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the LinkMutation builder.
func (m *LinkMutation) Filter() *LinkFilter {
	return &LinkFilter{config: m.config, predicateAdder: m}
}

// LinkFilter provides a generic filtering capability at runtime for LinkQuery.
type LinkFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *LinkFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *LinkFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(link.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *LinkFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(link.FieldCreatedAt))
}

// WhereData applies the entql string predicate on the data field.
func (f *LinkFilter) WhereData(p entql.StringP) {
	f.Where(p.Field(link.FieldData))
}

// addPredicate implements the predicateAdder interface.
func (pq *PostQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PostQuery builder.
func (pq *PostQuery) Filter() *PostFilter {
	return &PostFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PostMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PostMutation builder.
func (m *PostMutation) Filter() *PostFilter {
	return &PostFilter{config: m.config, predicateAdder: m}
}

// PostFilter provides a generic filtering capability at runtime for PostQuery.
type PostFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PostFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *PostFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(post.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PostFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(post.FieldCreatedAt))
}

// WhereData applies the entql string predicate on the data field.
func (f *PostFilter) WhereData(p entql.StringP) {
	f.Where(p.Field(post.FieldData))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *PostFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *PostFilter) WhereHasOwnerWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTags applies a predicate to check if query has an edge tags.
func (f *PostFilter) WhereHasTags() {
	f.Where(entql.HasEdge("tags"))
}

// WhereHasTagsWith applies a predicate to check if query has an edge tags with a given conditions (other predicates).
func (f *PostFilter) WhereHasTagsWith(preds ...predicate.Tag) {
	f.Where(entql.HasEdgeWith("tags", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMentions applies a predicate to check if query has an edge mentions.
func (f *PostFilter) WhereHasMentions() {
	f.Where(entql.HasEdge("mentions"))
}

// WhereHasMentionsWith applies a predicate to check if query has an edge mentions with a given conditions (other predicates).
func (f *PostFilter) WhereHasMentionsWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("mentions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (tq *TagQuery) addPredicate(pred func(s *sql.Selector)) {
	tq.predicates = append(tq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TagQuery builder.
func (tq *TagQuery) Filter() *TagFilter {
	return &TagFilter{config: tq.config, predicateAdder: tq}
}

// addPredicate implements the predicateAdder interface.
func (m *TagMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TagMutation builder.
func (m *TagMutation) Filter() *TagFilter {
	return &TagFilter{config: m.config, predicateAdder: m}
}

// TagFilter provides a generic filtering capability at runtime for TagQuery.
type TagFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TagFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *TagFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(tag.FieldID))
}

// WhereData applies the entql string predicate on the data field.
func (f *TagFilter) WhereData(p entql.StringP) {
	f.Where(p.Field(tag.FieldData))
}

// WhereHasPost applies a predicate to check if query has an edge post.
func (f *TagFilter) WhereHasPost() {
	f.Where(entql.HasEdge("post"))
}

// WhereHasPostWith applies a predicate to check if query has an edge post with a given conditions (other predicates).
func (f *TagFilter) WhereHasPostWith(preds ...predicate.Post) {
	f.Where(entql.HasEdgeWith("post", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: uq.config, predicateAdder: uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *UserFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(user.FieldID))
}

// WhereUsername applies the entql string predicate on the username field.
func (f *UserFilter) WhereUsername(p entql.StringP) {
	f.Where(p.Field(user.FieldUsername))
}

// WhereFirstName applies the entql string predicate on the first_name field.
func (f *UserFilter) WhereFirstName(p entql.StringP) {
	f.Where(p.Field(user.FieldFirstName))
}

// WhereLastName applies the entql string predicate on the last_name field.
func (f *UserFilter) WhereLastName(p entql.StringP) {
	f.Where(p.Field(user.FieldLastName))
}

// WhereHasPosts applies a predicate to check if query has an edge posts.
func (f *UserFilter) WhereHasPosts() {
	f.Where(entql.HasEdge("posts"))
}

// WhereHasPostsWith applies a predicate to check if query has an edge posts with a given conditions (other predicates).
func (f *UserFilter) WhereHasPostsWith(preds ...predicate.Post) {
	f.Where(entql.HasEdgeWith("posts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFriends applies a predicate to check if query has an edge friends.
func (f *UserFilter) WhereHasFriends() {
	f.Where(entql.HasEdge("friends"))
}

// WhereHasFriendsWith applies a predicate to check if query has an edge friends with a given conditions (other predicates).
func (f *UserFilter) WhereHasFriendsWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("friends", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFollowers applies a predicate to check if query has an edge followers.
func (f *UserFilter) WhereHasFollowers() {
	f.Where(entql.HasEdge("followers"))
}

// WhereHasFollowersWith applies a predicate to check if query has an edge followers with a given conditions (other predicates).
func (f *UserFilter) WhereHasFollowersWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("followers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProfile applies a predicate to check if query has an edge profile.
func (f *UserFilter) WhereHasProfile() {
	f.Where(entql.HasEdge("profile"))
}

// WhereHasProfileWith applies a predicate to check if query has an edge profile with a given conditions (other predicates).
func (f *UserFilter) WhereHasProfileWith(preds ...predicate.UserProfile) {
	f.Where(entql.HasEdgeWith("profile", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMentions applies a predicate to check if query has an edge mentions.
func (f *UserFilter) WhereHasMentions() {
	f.Where(entql.HasEdge("mentions"))
}

// WhereHasMentionsWith applies a predicate to check if query has an edge mentions with a given conditions (other predicates).
func (f *UserFilter) WhereHasMentionsWith(preds ...predicate.Post) {
	f.Where(entql.HasEdgeWith("mentions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (upq *UserProfileQuery) addPredicate(pred func(s *sql.Selector)) {
	upq.predicates = append(upq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserProfileQuery builder.
func (upq *UserProfileQuery) Filter() *UserProfileFilter {
	return &UserProfileFilter{config: upq.config, predicateAdder: upq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserProfileMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserProfileMutation builder.
func (m *UserProfileMutation) Filter() *UserProfileFilter {
	return &UserProfileFilter{config: m.config, predicateAdder: m}
}

// UserProfileFilter provides a generic filtering capability at runtime for UserProfileQuery.
type UserProfileFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserProfileFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *UserProfileFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(userprofile.FieldID))
}

// WhereAvatar applies the entql string predicate on the avatar field.
func (f *UserProfileFilter) WhereAvatar(p entql.StringP) {
	f.Where(p.Field(userprofile.FieldAvatar))
}

// WhereAbout applies the entql string predicate on the about field.
func (f *UserProfileFilter) WhereAbout(p entql.StringP) {
	f.Where(p.Field(userprofile.FieldAbout))
}

// WhereLocation applies the entql string predicate on the location field.
func (f *UserProfileFilter) WhereLocation(p entql.StringP) {
	f.Where(p.Field(userprofile.FieldLocation))
}

// WhereDob applies the entql time.Time predicate on the dob field.
func (f *UserProfileFilter) WhereDob(p entql.TimeP) {
	f.Where(p.Field(userprofile.FieldDob))
}

// WhereHasLinks applies a predicate to check if query has an edge links.
func (f *UserProfileFilter) WhereHasLinks() {
	f.Where(entql.HasEdge("links"))
}

// WhereHasLinksWith applies a predicate to check if query has an edge links with a given conditions (other predicates).
func (f *UserProfileFilter) WhereHasLinksWith(preds ...predicate.Link) {
	f.Where(entql.HasEdgeWith("links", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
