// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nibbleshift/drift/ent/link"
	"github.com/nibbleshift/drift/ent/userprofile"
)

// UserProfileCreate is the builder for creating a UserProfile entity.
type UserProfileCreate struct {
	config
	mutation *UserProfileMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAvatar sets the "avatar" field.
func (upc *UserProfileCreate) SetAvatar(s string) *UserProfileCreate {
	upc.mutation.SetAvatar(s)
	return upc
}

// SetAbout sets the "about" field.
func (upc *UserProfileCreate) SetAbout(s string) *UserProfileCreate {
	upc.mutation.SetAbout(s)
	return upc
}

// SetLocation sets the "location" field.
func (upc *UserProfileCreate) SetLocation(s string) *UserProfileCreate {
	upc.mutation.SetLocation(s)
	return upc
}

// SetDob sets the "dob" field.
func (upc *UserProfileCreate) SetDob(t time.Time) *UserProfileCreate {
	upc.mutation.SetDob(t)
	return upc
}

// AddLinkIDs adds the "links" edge to the Link entity by IDs.
func (upc *UserProfileCreate) AddLinkIDs(ids ...int) *UserProfileCreate {
	upc.mutation.AddLinkIDs(ids...)
	return upc
}

// AddLinks adds the "links" edges to the Link entity.
func (upc *UserProfileCreate) AddLinks(l ...*Link) *UserProfileCreate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return upc.AddLinkIDs(ids...)
}

// Mutation returns the UserProfileMutation object of the builder.
func (upc *UserProfileCreate) Mutation() *UserProfileMutation {
	return upc.mutation
}

// Save creates the UserProfile in the database.
func (upc *UserProfileCreate) Save(ctx context.Context) (*UserProfile, error) {
	return withHooks(ctx, upc.sqlSave, upc.mutation, upc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (upc *UserProfileCreate) SaveX(ctx context.Context) *UserProfile {
	v, err := upc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upc *UserProfileCreate) Exec(ctx context.Context) error {
	_, err := upc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upc *UserProfileCreate) ExecX(ctx context.Context) {
	if err := upc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upc *UserProfileCreate) check() error {
	if _, ok := upc.mutation.Avatar(); !ok {
		return &ValidationError{Name: "avatar", err: errors.New(`ent: missing required field "UserProfile.avatar"`)}
	}
	if _, ok := upc.mutation.About(); !ok {
		return &ValidationError{Name: "about", err: errors.New(`ent: missing required field "UserProfile.about"`)}
	}
	if _, ok := upc.mutation.Location(); !ok {
		return &ValidationError{Name: "location", err: errors.New(`ent: missing required field "UserProfile.location"`)}
	}
	if _, ok := upc.mutation.Dob(); !ok {
		return &ValidationError{Name: "dob", err: errors.New(`ent: missing required field "UserProfile.dob"`)}
	}
	return nil
}

func (upc *UserProfileCreate) sqlSave(ctx context.Context) (*UserProfile, error) {
	if err := upc.check(); err != nil {
		return nil, err
	}
	_node, _spec := upc.createSpec()
	if err := sqlgraph.CreateNode(ctx, upc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	upc.mutation.id = &_node.ID
	upc.mutation.done = true
	return _node, nil
}

func (upc *UserProfileCreate) createSpec() (*UserProfile, *sqlgraph.CreateSpec) {
	var (
		_node = &UserProfile{config: upc.config}
		_spec = sqlgraph.NewCreateSpec(userprofile.Table, sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt))
	)
	_spec.OnConflict = upc.conflict
	if value, ok := upc.mutation.Avatar(); ok {
		_spec.SetField(userprofile.FieldAvatar, field.TypeString, value)
		_node.Avatar = value
	}
	if value, ok := upc.mutation.About(); ok {
		_spec.SetField(userprofile.FieldAbout, field.TypeString, value)
		_node.About = value
	}
	if value, ok := upc.mutation.Location(); ok {
		_spec.SetField(userprofile.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := upc.mutation.Dob(); ok {
		_spec.SetField(userprofile.FieldDob, field.TypeTime, value)
		_node.Dob = value
	}
	if nodes := upc.mutation.LinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userprofile.LinksTable,
			Columns: []string{userprofile.LinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(link.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserProfile.Create().
//		SetAvatar(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserProfileUpsert) {
//			SetAvatar(v+v).
//		}).
//		Exec(ctx)
func (upc *UserProfileCreate) OnConflict(opts ...sql.ConflictOption) *UserProfileUpsertOne {
	upc.conflict = opts
	return &UserProfileUpsertOne{
		create: upc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserProfile.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (upc *UserProfileCreate) OnConflictColumns(columns ...string) *UserProfileUpsertOne {
	upc.conflict = append(upc.conflict, sql.ConflictColumns(columns...))
	return &UserProfileUpsertOne{
		create: upc,
	}
}

type (
	// UserProfileUpsertOne is the builder for "upsert"-ing
	//  one UserProfile node.
	UserProfileUpsertOne struct {
		create *UserProfileCreate
	}

	// UserProfileUpsert is the "OnConflict" setter.
	UserProfileUpsert struct {
		*sql.UpdateSet
	}
)

// SetAvatar sets the "avatar" field.
func (u *UserProfileUpsert) SetAvatar(v string) *UserProfileUpsert {
	u.Set(userprofile.FieldAvatar, v)
	return u
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *UserProfileUpsert) UpdateAvatar() *UserProfileUpsert {
	u.SetExcluded(userprofile.FieldAvatar)
	return u
}

// SetAbout sets the "about" field.
func (u *UserProfileUpsert) SetAbout(v string) *UserProfileUpsert {
	u.Set(userprofile.FieldAbout, v)
	return u
}

// UpdateAbout sets the "about" field to the value that was provided on create.
func (u *UserProfileUpsert) UpdateAbout() *UserProfileUpsert {
	u.SetExcluded(userprofile.FieldAbout)
	return u
}

// SetLocation sets the "location" field.
func (u *UserProfileUpsert) SetLocation(v string) *UserProfileUpsert {
	u.Set(userprofile.FieldLocation, v)
	return u
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *UserProfileUpsert) UpdateLocation() *UserProfileUpsert {
	u.SetExcluded(userprofile.FieldLocation)
	return u
}

// SetDob sets the "dob" field.
func (u *UserProfileUpsert) SetDob(v time.Time) *UserProfileUpsert {
	u.Set(userprofile.FieldDob, v)
	return u
}

// UpdateDob sets the "dob" field to the value that was provided on create.
func (u *UserProfileUpsert) UpdateDob() *UserProfileUpsert {
	u.SetExcluded(userprofile.FieldDob)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.UserProfile.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserProfileUpsertOne) UpdateNewValues() *UserProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserProfile.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserProfileUpsertOne) Ignore() *UserProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserProfileUpsertOne) DoNothing() *UserProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserProfileCreate.OnConflict
// documentation for more info.
func (u *UserProfileUpsertOne) Update(set func(*UserProfileUpsert)) *UserProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserProfileUpsert{UpdateSet: update})
	}))
	return u
}

// SetAvatar sets the "avatar" field.
func (u *UserProfileUpsertOne) SetAvatar(v string) *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.SetAvatar(v)
	})
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *UserProfileUpsertOne) UpdateAvatar() *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.UpdateAvatar()
	})
}

// SetAbout sets the "about" field.
func (u *UserProfileUpsertOne) SetAbout(v string) *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.SetAbout(v)
	})
}

// UpdateAbout sets the "about" field to the value that was provided on create.
func (u *UserProfileUpsertOne) UpdateAbout() *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.UpdateAbout()
	})
}

// SetLocation sets the "location" field.
func (u *UserProfileUpsertOne) SetLocation(v string) *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *UserProfileUpsertOne) UpdateLocation() *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.UpdateLocation()
	})
}

// SetDob sets the "dob" field.
func (u *UserProfileUpsertOne) SetDob(v time.Time) *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.SetDob(v)
	})
}

// UpdateDob sets the "dob" field to the value that was provided on create.
func (u *UserProfileUpsertOne) UpdateDob() *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.UpdateDob()
	})
}

// Exec executes the query.
func (u *UserProfileUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserProfileCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserProfileUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserProfileUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserProfileUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserProfileCreateBulk is the builder for creating many UserProfile entities in bulk.
type UserProfileCreateBulk struct {
	config
	builders []*UserProfileCreate
	conflict []sql.ConflictOption
}

// Save creates the UserProfile entities in the database.
func (upcb *UserProfileCreateBulk) Save(ctx context.Context) ([]*UserProfile, error) {
	specs := make([]*sqlgraph.CreateSpec, len(upcb.builders))
	nodes := make([]*UserProfile, len(upcb.builders))
	mutators := make([]Mutator, len(upcb.builders))
	for i := range upcb.builders {
		func(i int, root context.Context) {
			builder := upcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, upcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = upcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, upcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, upcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (upcb *UserProfileCreateBulk) SaveX(ctx context.Context) []*UserProfile {
	v, err := upcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upcb *UserProfileCreateBulk) Exec(ctx context.Context) error {
	_, err := upcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upcb *UserProfileCreateBulk) ExecX(ctx context.Context) {
	if err := upcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserProfile.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserProfileUpsert) {
//			SetAvatar(v+v).
//		}).
//		Exec(ctx)
func (upcb *UserProfileCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserProfileUpsertBulk {
	upcb.conflict = opts
	return &UserProfileUpsertBulk{
		create: upcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserProfile.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (upcb *UserProfileCreateBulk) OnConflictColumns(columns ...string) *UserProfileUpsertBulk {
	upcb.conflict = append(upcb.conflict, sql.ConflictColumns(columns...))
	return &UserProfileUpsertBulk{
		create: upcb,
	}
}

// UserProfileUpsertBulk is the builder for "upsert"-ing
// a bulk of UserProfile nodes.
type UserProfileUpsertBulk struct {
	create *UserProfileCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserProfile.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserProfileUpsertBulk) UpdateNewValues() *UserProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserProfile.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserProfileUpsertBulk) Ignore() *UserProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserProfileUpsertBulk) DoNothing() *UserProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserProfileCreateBulk.OnConflict
// documentation for more info.
func (u *UserProfileUpsertBulk) Update(set func(*UserProfileUpsert)) *UserProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserProfileUpsert{UpdateSet: update})
	}))
	return u
}

// SetAvatar sets the "avatar" field.
func (u *UserProfileUpsertBulk) SetAvatar(v string) *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.SetAvatar(v)
	})
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *UserProfileUpsertBulk) UpdateAvatar() *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.UpdateAvatar()
	})
}

// SetAbout sets the "about" field.
func (u *UserProfileUpsertBulk) SetAbout(v string) *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.SetAbout(v)
	})
}

// UpdateAbout sets the "about" field to the value that was provided on create.
func (u *UserProfileUpsertBulk) UpdateAbout() *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.UpdateAbout()
	})
}

// SetLocation sets the "location" field.
func (u *UserProfileUpsertBulk) SetLocation(v string) *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *UserProfileUpsertBulk) UpdateLocation() *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.UpdateLocation()
	})
}

// SetDob sets the "dob" field.
func (u *UserProfileUpsertBulk) SetDob(v time.Time) *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.SetDob(v)
	})
}

// UpdateDob sets the "dob" field to the value that was provided on create.
func (u *UserProfileUpsertBulk) UpdateDob() *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.UpdateDob()
	})
}

// Exec executes the query.
func (u *UserProfileUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserProfileCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserProfileCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserProfileUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
