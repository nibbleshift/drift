// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nibbleshift/drift/ent/link"
	"github.com/nibbleshift/drift/ent/predicate"
	"github.com/nibbleshift/drift/ent/userprofile"
)

// UserProfileUpdate is the builder for updating UserProfile entities.
type UserProfileUpdate struct {
	config
	hooks    []Hook
	mutation *UserProfileMutation
}

// Where appends a list predicates to the UserProfileUpdate builder.
func (upu *UserProfileUpdate) Where(ps ...predicate.UserProfile) *UserProfileUpdate {
	upu.mutation.Where(ps...)
	return upu
}

// SetAvatar sets the "avatar" field.
func (upu *UserProfileUpdate) SetAvatar(s string) *UserProfileUpdate {
	upu.mutation.SetAvatar(s)
	return upu
}

// SetAbout sets the "about" field.
func (upu *UserProfileUpdate) SetAbout(s string) *UserProfileUpdate {
	upu.mutation.SetAbout(s)
	return upu
}

// SetLocation sets the "location" field.
func (upu *UserProfileUpdate) SetLocation(s string) *UserProfileUpdate {
	upu.mutation.SetLocation(s)
	return upu
}

// SetDob sets the "dob" field.
func (upu *UserProfileUpdate) SetDob(t time.Time) *UserProfileUpdate {
	upu.mutation.SetDob(t)
	return upu
}

// AddLinkIDs adds the "links" edge to the Link entity by IDs.
func (upu *UserProfileUpdate) AddLinkIDs(ids ...int) *UserProfileUpdate {
	upu.mutation.AddLinkIDs(ids...)
	return upu
}

// AddLinks adds the "links" edges to the Link entity.
func (upu *UserProfileUpdate) AddLinks(l ...*Link) *UserProfileUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return upu.AddLinkIDs(ids...)
}

// Mutation returns the UserProfileMutation object of the builder.
func (upu *UserProfileUpdate) Mutation() *UserProfileMutation {
	return upu.mutation
}

// ClearLinks clears all "links" edges to the Link entity.
func (upu *UserProfileUpdate) ClearLinks() *UserProfileUpdate {
	upu.mutation.ClearLinks()
	return upu
}

// RemoveLinkIDs removes the "links" edge to Link entities by IDs.
func (upu *UserProfileUpdate) RemoveLinkIDs(ids ...int) *UserProfileUpdate {
	upu.mutation.RemoveLinkIDs(ids...)
	return upu
}

// RemoveLinks removes "links" edges to Link entities.
func (upu *UserProfileUpdate) RemoveLinks(l ...*Link) *UserProfileUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return upu.RemoveLinkIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (upu *UserProfileUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, upu.sqlSave, upu.mutation, upu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upu *UserProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := upu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (upu *UserProfileUpdate) Exec(ctx context.Context) error {
	_, err := upu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upu *UserProfileUpdate) ExecX(ctx context.Context) {
	if err := upu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (upu *UserProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userprofile.Table, userprofile.Columns, sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt))
	if ps := upu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upu.mutation.Avatar(); ok {
		_spec.SetField(userprofile.FieldAvatar, field.TypeString, value)
	}
	if value, ok := upu.mutation.About(); ok {
		_spec.SetField(userprofile.FieldAbout, field.TypeString, value)
	}
	if value, ok := upu.mutation.Location(); ok {
		_spec.SetField(userprofile.FieldLocation, field.TypeString, value)
	}
	if value, ok := upu.mutation.Dob(); ok {
		_spec.SetField(userprofile.FieldDob, field.TypeTime, value)
	}
	if upu.mutation.LinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userprofile.LinksTable,
			Columns: []string{userprofile.LinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(link.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upu.mutation.RemovedLinksIDs(); len(nodes) > 0 && !upu.mutation.LinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userprofile.LinksTable,
			Columns: []string{userprofile.LinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(link.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upu.mutation.LinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userprofile.LinksTable,
			Columns: []string{userprofile.LinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(link.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, upu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	upu.mutation.done = true
	return n, nil
}

// UserProfileUpdateOne is the builder for updating a single UserProfile entity.
type UserProfileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserProfileMutation
}

// SetAvatar sets the "avatar" field.
func (upuo *UserProfileUpdateOne) SetAvatar(s string) *UserProfileUpdateOne {
	upuo.mutation.SetAvatar(s)
	return upuo
}

// SetAbout sets the "about" field.
func (upuo *UserProfileUpdateOne) SetAbout(s string) *UserProfileUpdateOne {
	upuo.mutation.SetAbout(s)
	return upuo
}

// SetLocation sets the "location" field.
func (upuo *UserProfileUpdateOne) SetLocation(s string) *UserProfileUpdateOne {
	upuo.mutation.SetLocation(s)
	return upuo
}

// SetDob sets the "dob" field.
func (upuo *UserProfileUpdateOne) SetDob(t time.Time) *UserProfileUpdateOne {
	upuo.mutation.SetDob(t)
	return upuo
}

// AddLinkIDs adds the "links" edge to the Link entity by IDs.
func (upuo *UserProfileUpdateOne) AddLinkIDs(ids ...int) *UserProfileUpdateOne {
	upuo.mutation.AddLinkIDs(ids...)
	return upuo
}

// AddLinks adds the "links" edges to the Link entity.
func (upuo *UserProfileUpdateOne) AddLinks(l ...*Link) *UserProfileUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return upuo.AddLinkIDs(ids...)
}

// Mutation returns the UserProfileMutation object of the builder.
func (upuo *UserProfileUpdateOne) Mutation() *UserProfileMutation {
	return upuo.mutation
}

// ClearLinks clears all "links" edges to the Link entity.
func (upuo *UserProfileUpdateOne) ClearLinks() *UserProfileUpdateOne {
	upuo.mutation.ClearLinks()
	return upuo
}

// RemoveLinkIDs removes the "links" edge to Link entities by IDs.
func (upuo *UserProfileUpdateOne) RemoveLinkIDs(ids ...int) *UserProfileUpdateOne {
	upuo.mutation.RemoveLinkIDs(ids...)
	return upuo
}

// RemoveLinks removes "links" edges to Link entities.
func (upuo *UserProfileUpdateOne) RemoveLinks(l ...*Link) *UserProfileUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return upuo.RemoveLinkIDs(ids...)
}

// Where appends a list predicates to the UserProfileUpdate builder.
func (upuo *UserProfileUpdateOne) Where(ps ...predicate.UserProfile) *UserProfileUpdateOne {
	upuo.mutation.Where(ps...)
	return upuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (upuo *UserProfileUpdateOne) Select(field string, fields ...string) *UserProfileUpdateOne {
	upuo.fields = append([]string{field}, fields...)
	return upuo
}

// Save executes the query and returns the updated UserProfile entity.
func (upuo *UserProfileUpdateOne) Save(ctx context.Context) (*UserProfile, error) {
	return withHooks(ctx, upuo.sqlSave, upuo.mutation, upuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upuo *UserProfileUpdateOne) SaveX(ctx context.Context) *UserProfile {
	node, err := upuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (upuo *UserProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := upuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upuo *UserProfileUpdateOne) ExecX(ctx context.Context) {
	if err := upuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (upuo *UserProfileUpdateOne) sqlSave(ctx context.Context) (_node *UserProfile, err error) {
	_spec := sqlgraph.NewUpdateSpec(userprofile.Table, userprofile.Columns, sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt))
	id, ok := upuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserProfile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := upuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userprofile.FieldID)
		for _, f := range fields {
			if !userprofile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := upuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upuo.mutation.Avatar(); ok {
		_spec.SetField(userprofile.FieldAvatar, field.TypeString, value)
	}
	if value, ok := upuo.mutation.About(); ok {
		_spec.SetField(userprofile.FieldAbout, field.TypeString, value)
	}
	if value, ok := upuo.mutation.Location(); ok {
		_spec.SetField(userprofile.FieldLocation, field.TypeString, value)
	}
	if value, ok := upuo.mutation.Dob(); ok {
		_spec.SetField(userprofile.FieldDob, field.TypeTime, value)
	}
	if upuo.mutation.LinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userprofile.LinksTable,
			Columns: []string{userprofile.LinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(link.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upuo.mutation.RemovedLinksIDs(); len(nodes) > 0 && !upuo.mutation.LinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userprofile.LinksTable,
			Columns: []string{userprofile.LinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(link.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upuo.mutation.LinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userprofile.LinksTable,
			Columns: []string{userprofile.LinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(link.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserProfile{config: upuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, upuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	upuo.mutation.done = true
	return _node, nil
}
