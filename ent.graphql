directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateLinkInput is used for create Link object.
Input was generated by ent.
"""
input CreateLinkInput {
  createdAt: Time
  data: String!
}
"""
CreatePostInput is used for create Post object.
Input was generated by ent.
"""
input CreatePostInput {
  createdAt: Time
  data: String!
  ownerID: ID
  tagIDs: [ID!]
  mentionIDs: [ID!]
}
"""
CreateTagInput is used for create Tag object.
Input was generated by ent.
"""
input CreateTagInput {
  createdAt: Time
  data: String!
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  username: String!
  firstName: String!
  lastName: String!
  postIDs: [ID!]
  friendIDs: [ID!]
  followerIDs: [ID!]
  profileID: ID
}
"""
CreateUserProfileInput is used for create UserProfile object.
Input was generated by ent.
"""
input CreateUserProfileInput {
  avatar: String!
  about: String!
  location: String!
  dob: Time!
  linkIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Link implements Node {
  id: ID!
  createdAt: Time!
  data: String!
}
"""A connection to a list of items."""
type LinkConnection {
  """A list of edges."""
  edges: [LinkEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type LinkEdge {
  """The item at the end of the edge."""
  node: Link
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
LinkWhereInput is used for filtering Link objects.
Input was generated by ent.
"""
input LinkWhereInput {
  not: LinkWhereInput
  and: [LinkWhereInput!]
  or: [LinkWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """data field predicates"""
  data: String
  dataNEQ: String
  dataIn: [String!]
  dataNotIn: [String!]
  dataGT: String
  dataGTE: String
  dataLT: String
  dataLTE: String
  dataContains: String
  dataHasPrefix: String
  dataHasSuffix: String
  dataEqualFold: String
  dataContainsFold: String
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/nibbleshift/drift/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Post implements Node {
  id: ID!
  createdAt: Time!
  data: String!
  owner: User
  tags: [Tag!]
  mentions: [User!]
}
"""A connection to a list of items."""
type PostConnection {
  """A list of edges."""
  edges: [PostEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge."""
  node: Post
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Post connections"""
input PostOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Posts."""
  field: PostOrderField!
}
"""Properties by which Post connections can be ordered."""
enum PostOrderField {
  CREATED_AT
}
"""
PostWhereInput is used for filtering Post objects.
Input was generated by ent.
"""
input PostWhereInput {
  not: PostWhereInput
  and: [PostWhereInput!]
  or: [PostWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """data field predicates"""
  data: String
  dataNEQ: String
  dataIn: [String!]
  dataNotIn: [String!]
  dataGT: String
  dataGTE: String
  dataLT: String
  dataLTE: String
  dataContains: String
  dataHasPrefix: String
  dataHasSuffix: String
  dataEqualFold: String
  dataContainsFold: String
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [UserWhereInput!]
  """tags edge predicates"""
  hasTags: Boolean
  hasTagsWith: [TagWhereInput!]
  """mentions edge predicates"""
  hasMentions: Boolean
  hasMentionsWith: [UserWhereInput!]
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  links(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Links returned from the connection."""
    where: LinkWhereInput
  ): LinkConnection!
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Posts returned from the connection."""
    orderBy: PostOrder

    """Filtering options for Posts returned from the connection."""
    where: PostWhereInput
  ): PostConnection!
  tags(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Tags returned from the connection."""
    where: TagWhereInput
  ): TagConnection!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Users returned from the connection."""
    where: UserWhereInput
  ): UserConnection!
  userProfiles(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for UserProfiles returned from the connection."""
    where: UserProfileWhereInput
  ): UserProfileConnection!
}
type Tag implements Node {
  id: ID!
  createdAt: Time!
  data: String!
}
"""A connection to a list of items."""
type TagConnection {
  """A list of edges."""
  edges: [TagEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type TagEdge {
  """The item at the end of the edge."""
  node: Tag
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
TagWhereInput is used for filtering Tag objects.
Input was generated by ent.
"""
input TagWhereInput {
  not: TagWhereInput
  and: [TagWhereInput!]
  or: [TagWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """data field predicates"""
  data: String
  dataNEQ: String
  dataIn: [String!]
  dataNotIn: [String!]
  dataGT: String
  dataGTE: String
  dataLT: String
  dataLTE: String
  dataContains: String
  dataHasPrefix: String
  dataHasSuffix: String
  dataEqualFold: String
  dataContainsFold: String
}
"""The builtin Time type"""
scalar Time
type User implements Node {
  id: ID!
  username: String!
  firstName: String!
  lastName: String!
  posts: [Post!]
  friends: [User!]
  followers: [User!]
  profile: UserProfile
}
"""A connection to a list of items."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User
  """A cursor for use in pagination."""
  cursor: Cursor!
}
type UserProfile implements Node {
  id: ID!
  avatar: String!
  about: String!
  location: String!
  dob: Time!
  links: [Link!]
}
"""A connection to a list of items."""
type UserProfileConnection {
  """A list of edges."""
  edges: [UserProfileEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type UserProfileEdge {
  """The item at the end of the edge."""
  node: UserProfile
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
UserProfileWhereInput is used for filtering UserProfile objects.
Input was generated by ent.
"""
input UserProfileWhereInput {
  not: UserProfileWhereInput
  and: [UserProfileWhereInput!]
  or: [UserProfileWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """avatar field predicates"""
  avatar: String
  avatarNEQ: String
  avatarIn: [String!]
  avatarNotIn: [String!]
  avatarGT: String
  avatarGTE: String
  avatarLT: String
  avatarLTE: String
  avatarContains: String
  avatarHasPrefix: String
  avatarHasSuffix: String
  avatarEqualFold: String
  avatarContainsFold: String
  """about field predicates"""
  about: String
  aboutNEQ: String
  aboutIn: [String!]
  aboutNotIn: [String!]
  aboutGT: String
  aboutGTE: String
  aboutLT: String
  aboutLTE: String
  aboutContains: String
  aboutHasPrefix: String
  aboutHasSuffix: String
  aboutEqualFold: String
  aboutContainsFold: String
  """location field predicates"""
  location: String
  locationNEQ: String
  locationIn: [String!]
  locationNotIn: [String!]
  locationGT: String
  locationGTE: String
  locationLT: String
  locationLTE: String
  locationContains: String
  locationHasPrefix: String
  locationHasSuffix: String
  locationEqualFold: String
  locationContainsFold: String
  """dob field predicates"""
  dob: Time
  dobNEQ: Time
  dobIn: [Time!]
  dobNotIn: [Time!]
  dobGT: Time
  dobGTE: Time
  dobLT: Time
  dobLTE: Time
  """links edge predicates"""
  hasLinks: Boolean
  hasLinksWith: [LinkWhereInput!]
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """username field predicates"""
  username: String
  usernameNEQ: String
  usernameIn: [String!]
  usernameNotIn: [String!]
  usernameGT: String
  usernameGTE: String
  usernameLT: String
  usernameLTE: String
  usernameContains: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameEqualFold: String
  usernameContainsFold: String
  """first_name field predicates"""
  firstName: String
  firstNameNEQ: String
  firstNameIn: [String!]
  firstNameNotIn: [String!]
  firstNameGT: String
  firstNameGTE: String
  firstNameLT: String
  firstNameLTE: String
  firstNameContains: String
  firstNameHasPrefix: String
  firstNameHasSuffix: String
  firstNameEqualFold: String
  firstNameContainsFold: String
  """last_name field predicates"""
  lastName: String
  lastNameNEQ: String
  lastNameIn: [String!]
  lastNameNotIn: [String!]
  lastNameGT: String
  lastNameGTE: String
  lastNameLT: String
  lastNameLTE: String
  lastNameContains: String
  lastNameHasPrefix: String
  lastNameHasSuffix: String
  lastNameEqualFold: String
  lastNameContainsFold: String
  """posts edge predicates"""
  hasPosts: Boolean
  hasPostsWith: [PostWhereInput!]
  """friends edge predicates"""
  hasFriends: Boolean
  hasFriendsWith: [UserWhereInput!]
  """followers edge predicates"""
  hasFollowers: Boolean
  hasFollowersWith: [UserWhereInput!]
  """profile edge predicates"""
  hasProfile: Boolean
  hasProfileWith: [UserProfileWhereInput!]
}
